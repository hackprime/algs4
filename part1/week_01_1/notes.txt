INTRODUCTION

broad
Francis Sallivan
Donald Knuth
whether
To solve problem that could not otherwise be addressed
prerequisites
You can use your own programming environment if you comfortable with one or you can download ours



1.1 DYNAMIC CONNECTIVITY

quick-find
quick-union
Given a set of N nodes that can be connected.
1 -- 2 -- 3    4    0
|    |    |    |
5    6 -- 7    8    9
union(1, 2)
union(1, 5)
union(2, 6)
union(4, 8)
connected(1, 2) == True
connected(2, 3) == False
connected(5, 6) == True

union(2, 3)
union(6, 7)
union(3, 7)
connected(1, 7) == True
POINT: 1 connected with 7 by various ways (1,2,6,7), (1,2,3,7), (0), (9)
~suppress

"is connected to" (ict) relation is:
- reflexive: P ict P
- symmetric: if P ict Q then Q ict P
- transitive: if P ict Q and Q ict R then P ict R

connected components - maximal set of nodes that mutually connected: (1,2,3,5,6,7), (4,8)
connected component of one node allowed too
~maximal set of nodes that mutually connected
~maximal set of mutually connected nodes
~mutually



1.2 QUICK-FIND
~eager
Interpretation: given an array of integers of size N, p and q are connected iff they have the same i
idx: 0,1,2,3,4,5,6,7,8,9
    [0,1,1,1,4,1,1,1,4,9]

Quadratic complexity - not good because they do not scale. Computers get faster - quadratic algorythm get slower
~roughly


1.3 QUICK-UNION
interpretation change: arr[i] is parent of i. Keep going until is doesn't change
find: check if p and q have the same root
union: change of id of p's root to id of q's root


1.4 IMPROVEMENTS
balanced tree takes constant time for union and lg(N) (logarithm to the base two -- log base two) time to find.
We are using axtra array of size N that contains count of elements of each tree.
So we always need to merge tree with less size to tree with more size



1.5 UNION-FIND APPLICATIONS
~threshold



EXERCISE 1
(seed = 657919)
Give the id[] array that results from the following sequence of 6 union
operations on a set of 10 items using the quick-find algorithm.

    9-0 2-4 4-5 9-8 6-7 2-6

Recall: our quick-find convention for the union operation p-q is to change id[p]
(and perhaps some other entries) but not id[q].

~Recall that...
idx: 0 1 2 3 4 5 6 7 8 9
val: 0 1 2 3 4 5 6 7 8 9

9-0
idx: 0 1 2 3 4 5 6 7 8 9
val: 0 1 2 3 4 5 6 7 8 0

2-4
idx: 0 1 2 3 4 5 6 7 8 9
val: 0 1 4 3 4 5 6 7 8 0

4-5
idx: 0 1 2 3 4 5 6 7 8 9
val: 0 1 5 3 5 5 6 7 8 0

9-8
idx: 0 1 2 3 4 5 6 7 8 9
val: 8 1 5 3 5 5 6 7 8 8

6-7
idx: 0 1 2 3 4 5 6 7 8 9
val: 8 1 5 3 5 5 7 7 8 8

2-6
idx: 0 1 2 3 4 5 6 7 8 9
val: 8 1 7 3 7 7 7 7 8 8



EXERCISE 2
(seed = 38147)
Give the id[] array that results from the following sequence of 9 union
operations on a set of 10 items using the weighted quick-union algorithm from lecture.

    6-8 7-1 0-5 7-3 9-1 1-4 2-9 0-8 9-0

Recall: when joining two trees of equal size, our weighted quick union convention is to
make the root of the second tree point to the root of the first tree. Also, our weighted
quick union algorithm uses union by size (number of nodes), not union by height.

0 1 2 3 4 5 6 7 8 9

6-8
0 1 2 3 4 5 6 7   9
            |
            8

7-1
0   2 3 4 5 6 7   9
            | |
            8 1

0-5
0   2 3 4   6 7   9
|           | |
5           8 1

7-3
0   2   4   6     7   9
|           |    /|
5           8   3 1

9-1
0   2   4   6     7
|           |    /|\
5           8   3 1 9

1-4
0   2   6     __7
|       |    / /|\
5       8   4 3 1 9

2-9
0   6     __7__
|   |    / /|\ \
5   8   4 3 1 9 2

0-8
0        __7__
|\      / /|\ \
5 6    4 3 1 9 2
  |
  8

9-0
  ______7__
 /   / /|\ \
0   4 3 1 9 2
|\
5 6
  |
  8

7 7 7 7 7 0 0 7 6 7



EXERCISE 3
(seed = 799113)
Which of the following id[] array(s) could be the result of running the weighted quick union
algorithm on a set of 10 items? Check all that apply.

Recall that our weighted quick union algorithm uses union by size (number of nodes)
(and not union by height).

7 9 1 1 1 1 7 1 3 6 (!NO!)

        __1__
       / /|\ \
      5 4 7 2 3
          |   |
          6   8
          |
          9
          |
          1
          |
          0

4 1 2 3 4 5 6 3 8 5 (YES) [5-9 3-7 4-0]

    1 2 3 4 5 6 8
        | | |
        7 0 9

2 9 9 3 2 9 7 4 1 9 (!NO!)

       3    9
           /|\
          5 2 1
           /| |
          4 0 8
          |
          7
          |
          6

3 6 6 3 0 0 0 0 9 0 (!NO!)

    3         6
    |         |\
  __0__       1 2
 / /|\ \
4 5 6 7 9
        |
        8

5 5 7 5 6 5 7 5 5 5 (!NO!) [7-2 5-9 5-1 1-0 6-4 7-4 0-8 8-6 3-8]

     ____5__
    / / /|\ \
   0 1 3 7 8 9
        /|
       6 2
       |
       4

7 9 1 1 1 1 7 1 3 6 (!NO!)

        6_
        | \
        9 |
        | |
  ______1 |
 / / / /|/
5 4 3 2 7
    |   |
    8   0



SOME EXPLANATIONS
4 5 7 5 7 4 5 7 0 4  Correct 0.20    Size of tree rooted at parent of 4 < twice the size of tree rooted at 4
7 6 6 6 2 2 6 6 6 4  Correct 0.20    4-9 2-5 2-4 6-3 7-0 3-0 0-2 8-2 1-6
8 4 4 4 9 8 4 4 4 0  Correct 0.20    The id[] array contains a cycle: 9->0->8->4->9
2 3 2 3 4 5 6 7 8 2  Correct 0.20    2-9 3-1 0-2
9 8 6 3 0 5 9 0 0 3  Correct 0.20    Height of forest = 4 > lg N = lg(10)
