2.1 ANALISYS OF ALGORYTHMS INSTRICTION
~tackling
~insight
Scientific method:
- Observe
- Hypothesize
- Predict
- Verify
- Validate
if N=1000000: linearythmic algorythm is faster than quadratic algorythm by 50000 times
N*N / N*log(N) = 50000



2.2 OBSERVATIONS
~estimate
iterations grow function (complexity function) [running time function] {POWER LAW}
T(N) = a * N**b
a - platform dependent factors [constant] [COST]:
    Hardware (CPU, Memory, ...),
    Software (compiler, interpreter, garbage collector, ...)
    System (OS, network, other apps, ...)
b - platform independed factors [exponent] [FREQUENCY]:
    input data
    algorythm
~plot


2.3 MATHEMATICAL MODELS
Just need to count only expansive operations
for matrix: count only multiplications and recordings, not to count addition, division e.t.c
2sum problem: count only addition of 2 numbers
~negligible
~term (слагаемое)
tilde-notation
when N is large, terms are negligeble
when N is small, we dont care

3N**3 + 2N + 10 -> 3N**3 [leading term approximation

f(x) ~ g(x) = lim(n->inf, f(x)/g(x)) = 1



3.4 ORDER-OF-GROWTH CLASSIFICATION

[1] constant
[log(x)] logarithmic
[x] linear
[x * log(x)] linearithmic
[x ** 2] quadratic
[x ** 3] cubic
[2 ** x] exponential
~to keep pace with [Идти в ногу с]

BINARY SEARCH
6 13 14 25 33 43 51 53 64 72 84 93 95 96 97
search(33) == True
search(34) == False
~recurrent



3.5 THEORY OF ALGORYTHMS
best case - goal of all inputs
worst case - guarantee of all inputs
~suppress [подавлять, сдерживать]
~hort hand [стенография]
~steadly [укреплять, делать прочным]
~caveat [предостерижение, предупреждение]



3.6 MEMORY
~controvercy [спор, дискуссия]
~reasonable [разумный, обоснованный]
~and so forth [и так далее]
Scientific Method = Empirical Analyisys + Mathematical Analisys
EA:
- execute program to make experiments
- assume power low and formulate a hyposhesis for running time
- Model enables us to MAKE PREDICTIONS
MA:
- analyze algorythm to count frequency of operations
- use tilde nnotation to simplify analisys
- Model enables us to EXPLAI BEHAVIOR
SM:
- mathematical model is independent of a particular system; appliesto machines not yet built
- empericle analisys is necessary to valiudate mathematical model and to make predictions



EXERCISE 1

(seed = 594452)
Suppose that you time a program as a function of N and produce
the following table.

        N   seconds
-------------------
      512     0.000
     1024     0.002
     2048     0.010
     4096     0.053
     8192     0.284
    16384     1.532
    32768     8.189
    65536    43.635
   131072   233.218
   262144  1245.288


Estimate the order of growth of the running time as a function of N.
Assume that the running time obeys a power law T(N) ~ a N^b. For your
answer, enter the constant b. Your answer will be marked as correct
if it is within 1% of the target answer - we recommend using
two digits after the decimal separator, e.g., 2.34.

2.40




EXERCISE 2

(seed = 625648)
What is the order of growth of the worst case running time of the following code fragment
as a function of N?

int sum = 0;
for (int i = 1; i <= 4*N; i = i*4)
    for (int j = 0; j < i; j++)
        sum++;


  1
  log N
  N^(1/2)
V N
! N log N
  N^(3/2)
  N^2
  N^2 log N
  N^(5/2)
  N^3
  N^4
  N^5
  N^6
  N^7

The answer is : N

The body of the inner loop is executed 1 + 4 + 16 + 64 + ... + 4N ~ 16/3 N times.



EXERCISE 3

(seed = 494117)
Given the following definition of a MysteryBox object:

public class MysteryBox {
    private final int x0, x1;
    private final boolean y0;
    private final long z0, z1, z2, z3;
    private final double[] a = new double[16];

    ...
}
class -> 16 + 8
int x 2 = 8
bool x 1 = 1
long x 4 = 32
double[16] = 16 * 8 + 24



Using the 64-bit memory cost model from lecture, how many bytes does
each object of type MysteryBox use? Include all memory allocated when the
client calls new MysteryBox().

217

The correct answer is: 224

public class MysteryBox {                           //   16 (object overhead)
    private final int x0, x1;                       //    8 (2 int)
    private final boolean y0;                       //    1 (1 boolean)
    private final long z0, z1, z2, z3;              //   32 (4 long)
    private final double[] a = new double[16];      //    8 (reference to array)
                                                    //  152 (double array of size 16)
    ...                                                   7 (padding to round up to a multiple of 8)
}                                                      ----
                                                        224
