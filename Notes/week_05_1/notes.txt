9.1 2-3 SEARCH TREES

[Need to guarantee performance]

Alow 1 or 2 per node
2-node: one key, two children (less than k, greather than k)
3-node: two key, three children (less than k1, greather than k2, between k1 and k2)

+ perfect balance: Every path from root to null link has same length
+ symmetric order: Onorder traversal yealds keys in ascending order

insertion into a 3-node at bottom:
- add new key to 3-node to create temporary 4-node
- move middle key of 40node into parent
- repeat up the tree, as necessary
- if you reach the root and it's 4-node, split it into three 2-nodes

splitting 4-node takes constant number of operations: local transformation

tree height:
- worst case: log N [all 2-nodes]
- best case: log(3)N ~ 631 log N [all 3-nodes]
- between 12 and 20 for a million nodes
- between 18 and 30 for a billion nodes

Guaranteed logarithmic performance for search and insert!

SUMMARY:
    search:
        - worst case: c log N
        - average case: c log N
    insert:
        - worst case: c log N
        - average case: c log N
    delete:
        - worst case: c log N
        - average case: c log N
    ordered iteration? YES
    key interface - cpmpareTo()

Implementation is complicated:
- maintaining of multiple node types is cumbersome.
- need multiple compares  to move down tree
- need to move back up the tree to split 4-nodes
- large number of cases for splitting

~cumbersome [громоздкий]

Could do it, but there is a better (easier) way.

Q: Suppose that you are inserting a new key into a 2-3 tree. Under which one of the following scenarios must the height of the 2-3 tree increase by one?
A: The height of a 2-3 tree increases only when the root node splits, and this happens only when every node on the search path from the root to the leaf where the new key should be inserted is a 3-node.



9.2 Red-Black BSTs

~lean [наклонять]

left-leaned red-black BST
- represent 2-3 tree as a BST
- use 'internal' left-leaning links as "glue" for 3-nodes.
~glue [клей]
  (b d)              d
 /  |  \   ===>    // \
a   c   e          b   e
                  / \
                 a   c

/ - black link
// - red link

definition:
- No node has two red links connected to it
- Every path from root to node link has the same number of black links (perfect black balance)
- Red links lean left

Rotaion (left/right):
    b                d
   / \\            // \
  a   d    ==>     b   e
     / \          / \
    c   e        a   c

Color flip:
    |              ||
    b              b
  // \\    ==>    / \
  a   c          a   c
 / \ / \        / \ / \
.  . .  .      .  . .  .


insertion in LLRB tree:
- mark all new links as red
- red child red, left child black - rotate left
- left child, left-left grandchild red - rotate right
- both children red - flop colors

whenever LLRB becomes a power of two - is completely balanced
in both descendinag and ascending orders
what's about random order - it is very close to log N

--> height in worst case = 2 lg N
- every path from root to null link has same number of black links
- Never two red links in-a-row

~in a row [в ряд]

SUMMARY:
    search:
        - worst case: 2 log N
        - average case: 1.0 log N *
    insert:
        - worst case: 2 log N
        - average case: 1.0 log N *
    delete:
        - worst case: 2 log N
        - average case: 1.0 log N *
    ordered iteration? YES
    key interface - compareTo()
* exact value of coefficient unknown but extremely close to 1

~testimony [доказательство, свидетельство, признак]



9.3 B-TREES

page - contiguous blocks of memory (e.g. size = 4096)
probe - first access to page in memory, it is slower than reading data from memory

~contiguous [смежный, соседний]

Idea:  Generalize 2-3 trees by allowing up to M-1 key-link pairs per node.
- At least 2 key-link pairs at root
- At least M/2 key-link pairs in other nodes
- external nodes (leafs) contain client keys
- internal nodes contain copies of keys to guide search
--- choose M as large as possible so that M links fit in a page, e.g. M = 1024

A search or an insertion in a B-tree of order M with N keys requires
between log(M-1) N and log(M/2) N probes.
--> All internal nodes (besides root) have between M/2 and M-1 links.

In practice: Number of probes is at most 4 (M=1024, N=62 billion log(M/2) N <= 4)
Optimization: Always kepp root page in memory



EXERSICE 1

(seed = 41546)
Consider the left-leaning red-black BST whose level-order traversal is:

    59 31 80 23 45 75 84 21 24 35 71 81 14

List (in ascending order) the keys in the red nodes. A node is red if the link
from its parent is red.
Answer for Question 1
You entered:

Your Answer   Score Explanation
23 35 71 81 14  Incorrect 0.00
Total   0.00 / 1.00
Question Explanation

The correct answer is: 14 23 35 71 81

The shape of a BST is uniquely determined by its level-order traversal.

To deduce which links are red, recall that the length of every path from the root to a
null link has the same number of black links; apply this property starting from nodes
at the bottom.



EXERSICE 2

(seed = 553435)
Consider the left-leaning red-black BST whose level-order traversal is

    64 55 89 50 63 76 96 28 74 81          ( red links = 28 76 )

What is the level-order traversal of the red-black BST that results after
inserting the following sequence of keys:

    62 85 43
Answer for Question 2
You entered:

Your Answer   Score Explanation
64 55 89 43 63 76 96 28 50 62 74 85 81  Correct 1.00
Total   1.00 / 1.00
Question Explanation

The correct answer is: 64 55 89 43 63 76 96 28 50 62 74 85 81

Here is the level-order traversal of the red-black BST after each insertion:

    64 55 89 50 63 76 96 28 74 81          ( red links = 28 76 )
62: 64 55 89 50 63 76 96 28 62 74 81       ( red links = 28 62 76 )
85: 64 55 89 50 63 76 96 28 62 74 85 81    ( red links = 28 62 76 81 )
43: 64 55 89 43 63 76 96 28 50 62 74 85 81 ( red links = 43 62 76 81 )



EXERSICE 3

(seed = 128068)
Which of the following statements about balanced search trees are true? Check all that apply. Unless otherwise specified, assume that the 2-3 tree and red-black BSTs are as described in lecture (e.g., 2-3 trees are perfectly balanced and red-black BST are left-leaning red-black BSTs with internal links colored either red or black).
Your Answer   Score Explanation

[V] The maximum height of a 2-3 tree with N keys is ~ lg N.
Correct 0.20  The maximum height is floor(lg N), when all nodes are 2-nodes.

[V] It is possible to implement the left (or right) rotation operations in a BST in constant time.
Correct 0.20  A left or right rotation changes only a constant number of pointers.

[X] The order of growth of the minimum number of nodes in a red-black BST of height h is 2^(h/2).
Inorrect  0.00  This is a bit tricky. Consider a 2-3 tree of height h with 3-nodes on the leftmost spine and 2-nodes everywhere else. The number of nodes is 1 + 3 + 7 + ... + (2^(h+1) - 1) = 2^(h+2) - h - 3. This corresponds to a red-black BST with 2^(h+2) - 3 nodes and height 2h.

[X] A height-balanced BST is a binary search tree in which the height of any two siblings differ by at most 1. In a height-balanced BST on N nodes, the height is logarithmic in N.
Inorrect  0.00  These are also known as AVL trees. Since AVL trees are binary trees, the height is at least ~ lg N. Let N(h) be the minimum number of nodes in an AVL tree of height h. Then, N(h) satisfies N(h) = 1 + N(h-1) + N(h-2) >= 2N(h-2). Thus, N(h) >= 2^(h/2), or equivalently, h

[X] The subtree rooted at any node of a 2-3 tree is itself a 2-3 tree.
Inorrect  0.00  It satisfies symmetric order and perfect balance.


[V] The number of structurally different red-black BSTs (with respect to tree shape and link colors) containing 6 keys is 4.
Inorrect  0.00  The number is 3. Consider the corresponding 2-3 trees: The root is a 3-node and exactly one of its three children is a 3-node.

[V] The maximum height of a 2-3 tree with N keys is ~ log_3 N.
Inorrect  0.00  The maximum height is floor(lg N), when all nodes are 2-nodes.

[V] In a red-black BST on N nodes, the search and insert operations take logarithmic time in the worst case.
Correct 0.20  In the worst case, each of these operations takes time proportional to the height of the tree, which is logarithmic in N.

[V] Consider inserting N keys in ascending order into an initially empty red-black BST. Then, each insertion triggers at most 1 rotation (left or right).
Correct 0.20  Each insert performs 1 left rotation and no right rotations, except when N is one less than a power of 2 (in which case it performs no rotations).

[X] Given a red-black BST on N nodes, the maximum decrease in height after inserting a key is ~ lg N.
Inorrect  0.00  Consider inserting N = 2^n - 2 keys in decreasing order. The height is ~ 2 lg N. After inserting a key smaller than any of the first N keys, the height decreases to ~ lg N.


[X] Consider inserting N distinct keys into an initially empty red-black BST. Then, in the worst case, the total number of rotations is linearithmic in N.
Correct 0.20  This is a tricky one. We show that the number of rotations is at most 3N. First we claim that the total number of color flips is at most N: Each insertion (other than the first one) colors one link red and then performs rotations and color flips to restore the red-black BST invariants; rotations do not change the number of red links; each color flip decreases the number of red links by 1 (typical case) or by 2 (if performed at the root). During an insert operation, after any two consecutive rotation operations, there is a color flip.

[V] Consider inserting N keys in ascending order into an initially empty red-black BST. Then, after each insertion, the height of the tree either strictly increases or remains unchanged.
Correct 0.20  The BST remains perfectly balanced - after the ith insertion, its height is exactly floor(lg i), which is a monotonically nodecreasing function of i.

[X] Suppose that some unsuccessful search in a red-black BST terminates after 20 compares. Then, any unsuccessful search performs at least 11 compares.
Correct 0.20  In the extreme case, the links alternate between red and black (starting and ending with red, not including the null link) and the black height is 9. Any unsuccessful search traces a path from the root to a null link; there are exactly 9 black links (not including the null link) along such a path. If the path contains no red links, then it contains only 10 nodes (and makes only 10 compares).

[X] A weight-balanced BST is a binary serach tree in which for each node the number of nodes in its left subtree is at least half and at most twice the number of nodes in its right subtree. In a weight-balanced BST on N nodes, the height is logarithmic in N.
Inorrect  0.00  The minimum height occurs when the tree is perfectly balanced, in which case the height is ~ lg N. Let H(N) be the the maximum height of a weight-balanced BST on N nodes. Then, the larger subtree contains at most two-thirds of the nodes. Thus, H(N) satisfies the recurrence H(N) = H(2N/3) + 1, whose solution is H(N) ~ log_(3/2) N.

[X] It is possible to construct a red-black BST from a sorted array of N distinct keys in linear time.
Inorrect  0.00  Create a perfectly balanced BST by choosing the (upper) median key to be the root and recursively construct a perfectly balanced BST in each subtree. The resulting tree can be (uniquely) colored to make it a red-black BST. One way to see how is to color every link in the bottommost level red so that the red-black BST has perfect black balance. Note that since we use the upper median (instead of the lower median), whenever there is a right-leaning link that is red, the sibling left-leaning link will also be red. Now, repeatedly apply color flip operations until there are no more right-leaning red links.


[V] Consider inserting N keys in ascending order into an initially empty red-black BST. Then, after each insertion, the height of the tree either strictly increases or remains unchanged.
Correct 0.20  The BST remains perfectly balanced - after the ith insertion, its height is exactly floor(lg i), which is a monotonically nodecreasing function of i.

[V] Given a red-black BST, it is possible to change the colors of some of the links and produce a different red-black BST.
Inorrect  0.00  The colors of the links in a red-black BST are uniquely determined by the shape of the tree.

[V] Consider two paths from the root to a null link in a red-black BST on N nodes. Then, the maximum difference in the length of the two paths is ~ lg N.
Correct 0.20  The extreme case occurs when the length of one path is ~ lg N and the length of the other path is ~ 2 lg N.

[X] Let x and y be two sibling nodes in a red-black BST. Then, the black height of the subtree rooted at x equals the black height of the subtree rooted at y.
Correct 0.20  If the link between x and its parent is red, then the black height of the subtree rooted at x will be one less than the black height of the subtree rooted at y.

[V] Consider two paths from the root to a null link in a red-black BST on N nodes. Then, the maximum difference in the length of the two paths is a constant.
Correct 0.20  The extreme case occurs when the length of one path is ~ lg N and the length of the other path is ~ 2 lg N.
